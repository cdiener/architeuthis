{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>architeuthis is named after Architeuthis dux, the giant squid. It also sounds like \"archi-do-this\", so giving instructions to your pet kraken.</p> <p>architeuthis is a fast standalone command to supplement the Kraken suite of software tools such like Kraken2, KrakenUniq, and Bracken. I saw myself repeatedly rewriting the same code in my pipelines when dealing with Kraken output, like merging files or maninpulating lineage annotations. It also adds some functionality to dive deeper into the individual k-mer classifications for reads.</p>"},{"location":"#main-functionality","title":"Main functionality","text":"<ol> <li>Merge or combine outputs from Kraken/Bracken across many samples efficiently</li> <li>Add complete taxonomic lineage annotation to Bracken outputs</li> <li>Analyze mapping across taxa, e.g.<ul> <li>How often did reads that matched one taxon also match another?</li> <li>Are there cross-domain matches in my data set?</li> </ul> </li> <li>Filter Kraken mappings by several metrics<ul> <li>mapping consistency</li> <li>multiple mappings on the final taxonomic rank</li> <li>mapping entropy on the final taxonomic rank</li> </ul> </li> </ol>"},{"location":"#usage","title":"Usage","text":"<pre><code>Usage:\n  architeuthis [command]\n\nAvailable Commands:\n  completion  Generate the autocompletion script for the specified shell\n  help        Help about any command\n  lineage     Add lineage information to Bracken output.\n  mapping     Analyze read and k-mer level mapping.\n  merge       Merge various output files related to Kraken.\n\nFlags:\n      --db string   path to the Kraken database [optional]\n  -h, --help        help for architeuthis\n</code></pre>"},{"location":"filter/","title":"Filtering","text":"<p><code>architeuthis</code> is also capable of scoring and filtering reads on several metrics that go a little father than the already available confidence scoring in Kraken2.</p>"},{"location":"filter/#post-filtering-reads","title":"Post-filtering reads","text":"<p>You can use the <code>mapping filter</code> to keep only those reads in a Kraken run that have high quality mappings and drop the rest. This can sometimes avoid common issues such as cross-domain mapping.</p> <p>A diverse Kraken DB</p> <p>This will work best when using the most diverse Kraken DB available, meaning a database that includes as many of the organisms in the habitat as feasible.</p> <p>The supported metrics are:</p> Consistency Consistency denotes the fraction of kmer-level taxonomy assignments that are contained   in the final read classification. So it qunatifies how many of the alternative   classifications are contained in a single phylogentic path. Multiplicity Multiplicity is the number of unique kmers assignments at the same rank r as the read   assignment. So a read classified on the species level with a multiplicity of 2 matches   2 unique species. Entropy Entropy is the Shannon index of the kmer assignments on the same rank as the final read   assignment. So it measures how surprising or distinct the alternative classifications are.   One can see it as an abundance weighted multiplicity."},{"location":"filter/#usage","title":"Usage","text":"<p>To filter reads on one or more metric use</p> <pre><code>architeuthis mapping filter \\\n    --min-consistency 0.9 \\\n    --max-multiplicity 2 \\\n    --max-entropy 0.1 \\\n    --out filtered.k2 \\\n    my_sample.k2\n</code></pre> <p>This example is using the default parameters which should lead to fairly high quality read classifications. The output is a valid Kraken output and a strict subset of the input file. <code>mapping filter</code> supports the <code>--data-dir</code> option (see below).</p>"},{"location":"filter/#scoring-reads","title":"Scoring reads","text":"<p>It is also possible to only output the metrics for all classified reads in a sample.</p>"},{"location":"filter/#usage_1","title":"Usage","text":"<pre><code>architeuthis mapping score my_sample.k2 --out scores.csv\n</code></pre>"},{"location":"filter/#output","title":"Output","text":"<pre><code>ample_id,read_id,taxid,name,rank,n_kmers,consistency,confidence,multiplicity,entropy\ntestdata/negative,165179_NZ_CP102288.1_598818_598628_1_0_0_0_0:0:0_0:0:0_f59,165179,s__Segatella copri,s,153,1,1,1,0\ntestdata/negative,47678_NZ_CP081920.1_2131436_2131626_0_1_0_0_0:0:0_0:0:0_4749,816,g__Bacteroides,g,145,1,1,1,0\ntestdata/negative,821_NZ_CP103067.1_1529728_1529923_0_1_0_0_2:0:0_1:0:0_4c09,909656,g__Phocaeicola,g,68,1,1,1,0\ntestdata/negative,299767_NZ_CP099310.1_741506_741350_1_0_0_0_1:0:0_0:0:0_162,547,g__Enterobacter,g,82,0.975609756097561,0.96,2,0.167944147734173\ntestdata/negative,328813_NZ_AP019738.1_1486487_1486329_1_0_0_0_0:0:0_2:0:0_2ffc,328813,s__Alistipes onderdonkii,s,116,1,1,1,0\ntestdata/negative,418240_NZ_CP102267.1_4677848_4677952_0_1_0_0_0:0:0_3:0:0_66a6,1121115,s__Blautia wexlerae,s,185,1,1,1,0\ntestdata/negative,562_NZ_CP038408.1_5034459_5034717_0_1_0_0_0:0:0_0:0:0_f,543,f__Enterobacteriaceae,f,183,1,1,1,0\ntestdata/negative,821_NZ_CP103067.1_3126223_3126146_1_0_0_0_0:0:0_2:0:0_a0a1,909656,g__Phocaeicola,g,161,1,1,1,0\ntestdata/negative,821_NZ_CP043529.1_3737695_3737718_0_1_0_0_0:0:0_1:0:0_247c,821,s__Phocaeicola vulgatus,s,135,1,1,1,0\ntestdata/negative,46503_NZ_CP085927.1_2378513_2378638_0_1_0_0_1:0:0_1:0:0_8897,46503,s__Parabacteroides merdae,s,137,1,1,1,0\ntestdata/negative,39486_NZ_CP102279.1_1096816_1096614_1_0_0_0_1:0:0_1:0:0_2649,186803,f__Lachnospiraceae,f,108,1,1,1,0\ntestdata/negative,820_NZ_CP072255.1_61761_61514_1_0_0_0_0:0:0_1:0:0_1e488,820,s__Bacteroides uniformis,s,176,1,1,1,0\n[...]\n</code></pre> <p>This also reports the Kraken confidence score using the provided taxonomy dump.</p>"},{"location":"filter/#specifying-the-ncbi-taxonomy-dump","title":"Specifying the NCBI Taxonomy dump","text":"<p>You can use any downloaded NCBI Taxonomy dump for lineage annotation by specifying the <code>--data-dir</code> option, for instance:</p> <pre><code>architeuthis mapping score --data-dir /my/taxdump/ my_sample.k2 --out scores.csv\n</code></pre>"},{"location":"filter/#specifying-the-lineage-format","title":"Specifying the lineage format","text":"<p>You can specify the lineage format using the taxonkit syntax. The defualt lineage format is <code>{K};{p};{c};{o};{f};{g};{s}</code> which are the canonical ranks down to species level. However, you could change this. For instance, to only keep genus and species:</p> <pre><code>architeuthis mapping score --format \"{g};{s}\" my_sample.k2 --out scores.csv\n</code></pre>"},{"location":"install/","title":"Installation","text":"<p>Architeuthis is a standalone binary. Some of its installation requires taxonkit I recommend you install this as well (already done when using conda).</p>"},{"location":"install/#conda-or-mamba","title":"Conda or Mamba","text":"<p><code>architeuthis</code> is provided within bioconda and can be installed via</p> <pre><code>conda install -c conda-forge -c bioconda architeuthis\n</code></pre>"},{"location":"install/#binary-release","title":"Binary release","text":"<p>You can also simply download a binary for your system from the releases page. Either execute it in the containing folder order add it to your <code>$PATH</code>.</p>"},{"location":"install/#choose-a-ncbi-taxonomy-version","title":"Choose a NCBI Taxonomy version","text":"<p>This will also install taxonkit. If you want to use a new or custom version of the NCBI taxonomy you need to set that up with taxonkit.</p> <p>In case you have built your own Kraken database it is also possible to use the taxonomy directly from there. For this simply add the <code>--db</code> option to your <code>architeuthis</code> calls. For instance:</p> <pre><code>architeuthis --db /path/to/my/kraken_db lineage my_file.b2\n</code></pre> <p>Which Taxonomy to use?</p> <p>Unless you specifically want to reclassify under a different taxonomy, I recommend to always use the taxonomy from the Kraken DB if available.</p>"},{"location":"lineage/","title":"Lineage annotation","text":"<p>The <code>lineage</code> subcommand allows you to add full lineage information to Bracken quantifications or mapping analyses.</p> <p>Lineage information can be addded to the following file types for now:</p> <ol> <li>Bracken output, for instance <code>my_sample.b2</code></li> <li>Bracken outputs merged by <code>architeuthis</code>, for instance <code>merged.csv</code></li> <li>Mapping analyses generated by <code>architeuthis</code>, for instance <code>mappings.csv</code></li> </ol> <p>Info</p> <p><code>architeuthis</code> will automatically recognize and validate the file type and tell you if your file is not supported.</p>"},{"location":"lineage/#usage","title":"Usage","text":"<pre><code>architeuthis lineage my_file.b2 -o my_file_lineage.csv\n</code></pre> <p>Here the <code>-o</code> or <code>--out</code> option specify the path of the output file. The output will be in <code>CSV</code> format.</p> <p>Add lineage or merge first?</p> <p>If you want a merged BRACKEN output with lineage it is more efficient to merge first and then assign the lineage information, because <code>architeuthis</code> used a taxonomy hash for faster assignment.</p>"},{"location":"lineage/#specifying-the-ncbi-taxonomy-dump","title":"Specifying the NCBI Taxonomy dump","text":"<p>You can use any downloaded NCBI Taxonomy dump for lineage annotation by specifying the <code>--data-dir</code> option, for instance:</p> <pre><code>architeuthis lineage --data-dir /my/taxdump/ my_file.b2 -o my_file_lineage.csv\n</code></pre>"},{"location":"lineage/#specifying-the-lineage-format","title":"Specifying the lineage format","text":"<p>You can specify the lineage format using the taxonkit syntax. The defualt lineage format is <code>{k};{p};{c};{o};{f};{g};{s}</code> which are the canonical ranks down to species level. However, you could change this. For instance, to only keep genus and species:</p> <pre><code>architeuthis lineage --format \"{g};{s}\" my_file.b2 -o my_file_lineage.csv\n</code></pre> <p>Why does lineage not separate ranks into its own CSV columns?</p> <p>This is to maintain flexibility for many supported organisms as some lack specific canonical ranks. For instance, many eukaryotes do not have a phylum. This strategy is also similar to what Qiime2 does.</p>"},{"location":"mapping/","title":"Mapping Analysis","text":"<p>The <code>mapping</code> module contains tools to analyze the k-mer-level mapping results from Kraken output. It also contains commands to filter Kraken output.</p>"},{"location":"mapping/#k-mer-mapping","title":"K-mer mapping","text":"<p>The <code>kmer</code> subcommand allows to summarize mapping results in detail by resolving on the k-mer least common ancestor assignments made in individual reads and summarizing on the final classification. Its major purpose is to see which alternative mappings exist for any given taxon in the final read-level Kraken classification. It can be used to answer the following questions for instance:</p> <ul> <li>How many bacterial reads could also be classified as human?</li> <li>Are species well-resolved or do those reads also map to closely related species?</li> </ul>"},{"location":"mapping/#usage","title":"Usage","text":"<p>To generate a map for all reads in a sample use</p> <pre><code>architeuthis mapping kmers my_sample.k2 --out mappings.csv `\n</code></pre>"},{"location":"mapping/#output","title":"Output","text":"<p>This will look somehwat like this:</p> <pre><code>sample_id,classification,n_reads,taxid,n_kmers\ntest,28111,12,9749,5\ntest,28111,12,171549,7\ntest,28111,12,0,246\ntest,28111,12,4498,4\ntest,28111,12,815,3\ntest,28111,12,131567,1\ntest,28111,12,976,1\ntest,28111,12,28111,1728\ntest,28111,12,816,90\n[...]\n</code></pre> <p><code>sample_id</code> identified the classified file, <code>classification</code> the final taxon ID assigned by Kraken2, <code>n_reads</code> denotes the number of reads assigned that taxon, <code>taxid</code> denotes the taxon ID of the specific k-mers in the reads, and <code>n_kmers</code> denotes how many k-mers were assigned that specific taxon ID. So for instance in the example aboved the final classification was <code>28111</code> (Bacteroides egghertii) for 12 reads. The majority of individual k-mers (1728) were also assigned that taxon, whereas for instace 90 k-mers were assigned to 816 which is the Bacteroides genus.</p>"},{"location":"mapping/#taxonomic-mapping-summary","title":"Taxonomic mapping summary","text":"<p>The mapping analyses can also be summarized in a taxonomy-centric manner by collapsing on individual ranks. This is done with the <code>summary</code> subcommand.</p>"},{"location":"mapping/#usage_1","title":"Usage","text":"<p>To generate summarize the mappings use</p> <pre><code>architeuthis mapping summary my_sample.k2 --out mapping_summary.csv\n</code></pre>"},{"location":"mapping/#output_1","title":"Output","text":"<p>This will look like this:</p> <pre><code>sample_id,classification,lineage,total_reads,name,rank,kmers,in_lineage\ntest,815,k__Bacteria;p__Bacteroidota;c__Bacteroidia;o__Bacteroidales;f__Bacteroidaceae;g__;s__,13,p__Bacteroidota,p,2055,1\ntest,815,k__Bacteria;p__Bacteroidota;c__Bacteroidia;o__Bacteroidales;f__Bacteroidaceae;g__;s__,13,c__Bacteroidia,c,2055,1\ntest,815,k__Bacteria;p__Bacteroidota;c__Bacteroidia;o__Bacteroidales;f__Bacteroidaceae;g__;s__,13,o__Bacteroidales,o,2048,1\ntest,815,k__Bacteria;p__Bacteroidota;c__Bacteroidia;o__Bacteroidales;f__Bacteroidaceae;g__;s__,13,f__Bacteroidaceae,f,1794,1\ntest,815,k__Bacteria;p__Bacteroidota;c__Bacteroidia;o__Bacteroidales;f__Bacteroidaceae;g__;s__,13,k__Eukaryota,k,3,0\ntest,815,k__Bacteria;p__Bacteroidota;c__Bacteroidia;o__Bacteroidales;f__Bacteroidaceae;g__;s__,13,o__Fabales,o,3,0\ntest,815,k__Bacteria;p__Bacteroidota;c__Bacteroidia;o__Bacteroidales;f__Bacteroidaceae;g__;s__,13,f__Fabaceae,f,3,0\ntest,815,k__Bacteria;p__Bacteroidota;c__Bacteroidia;o__Bacteroidales;f__Bacteroidaceae;g__;s__,13,k__Bacteria,k,2096,1\ntest,815,k__Bacteria;p__Bacteroidota;c__Bacteroidia;o__Bacteroidales;f__Bacteroidaceae;g__;s__,13,p__Streptophyta,p,3,0\ntest,815,k__Bacteria;p__Bacteroidota;c__Bacteroidia;o__Bacteroidales;f__Bacteroidaceae;g__;s__,13,c__Magnoliopsida,c,3,0\n</code></pre> <p><code>sample_id</code> identified the classified file, <code>classification</code> the final taxon ID assigned by Kraken2, <code>lineage</code> the full lineage of the final classification, <code>total_reads</code> denotes the number of reads assigned that taxon, <code>name</code> denotes the taxonomic name of the specific k-mers in the reads, <code>rank</code> the taxonomic rank of the k-mer classificaton, <code>n_kmers</code> denotes how many k-mers were assigned that specific taxon, and <code>in_lineage</code> tells you whether that specific classification is contained within the final read-leval classification or not (discordant mapping). So for instance in the example above you can see that within the Bacteroidaceae 3 k-mers were mapped to Eukaryotes.</p>"},{"location":"mapping/#options","title":"Options","text":"<p>As for the lineage command you can use the <code>--data-dir</code> and <code>--format</code> options to control the location of the NCBI taxonomy dumps and to specify the ranks included in the analysis.</p> <p>For instance, to use a custom taxonomy and only the kingdom level you would use:</p> <pre><code>architeuthis mapping summary --data-dir /my/taxonomy --format \"{k}\" --out my_summary.csv my_sample.k2\n</code></pre> <p>Restrictions for the format</p> <p>Note that <code>architeuthis mapping summary</code> only supports the <code>;</code> separator in the <code>--format</code> argument.</p>"},{"location":"merge/","title":"Merging","text":"<p>The <code>merge</code> subcommand combines Kraken/Bracken output across several samples. It currently supports</p> <ol> <li>Kraken output files (<code>*.k2</code>)</li> <li>Bracken output files (<code>*.b2</code>)</li> <li>Mapping analyses (<code>*.csv</code>)</li> </ol> <p>Info</p> <p><code>architeuthis</code> will automatically recognize and validate the file type and tell you if your file is not supported.</p>"},{"location":"merge/#usage","title":"Usage","text":"<p>For instance to combine several Bracken output files:</p> <pre><code>architeuthis merge -o bracken_merged.csv *.b2\n</code></pre> <p>This will combine all <code>*.b2</code> files into a single merged CSV with an additional <code>sample_id</code> column generated from the basename of the files.</p> <p>For Kraken output the resulting file will still be in the native Kraken output format without an additional column as this format operates on individual reads which already have a unique sample-specific ID.</p>"},{"location":"release_notes/","title":"Releases","text":"<p>Those are the changes to <code>architeuthis</code> starting with version 0.3.0.</p>"},{"location":"release_notes/#040","title":"0.4.0","text":"<p><code>architeuthis mapping filter</code> now allows the <code>--format</code> argument.</p> <p>Switches the default highest rank in lineage annotaion to kingdom (<code>K__</code>) as superkingdom has been removed from the newest NCBI taxonomy.</p> <p>The annotation leaf is now detected from the back, making it resistant to missing higher ranks.</p> <p><code>architeuthis mapping filter</code> logs will now indicate if a custom taxonomy directory is used.</p>"},{"location":"release_notes/#031","title":"0.3.1","text":"<p>Fixes the merging for Kraken2 files.</p> <p>Add more checks during parsing.</p>"},{"location":"release_notes/#030","title":"0.3.0","text":"<p>Now supports Kraken2 output generated with the <code>--use-names</code> flag.</p> <p>Adds documentation with mkdocs.</p>"}]}